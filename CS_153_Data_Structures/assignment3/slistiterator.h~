#ifndef SLISTITERATOR_H
#define SLISTITERATOR_H

//////////////////////////////////////////////////////////////////////
/// @file slistiteratior.h
/// @author James Anderson  CS 153 Section A
/// @brief Heder file for SListIterator  class for assignment 3
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @class SListIterator 
/// @brief SListIterator is a iterator used to move through and extract data
/// from the slist class
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::SListIterator ()
/// @brief creates a new SListIterator  
/// @post creates a new SListIterator   
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::SListIterator (SNode<generic> * x);
/// @brief creates an iterator stating at a specific pointer
/// @param x holds pointer to the staring node of the iterator
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::generic operator* () const
/// @brief feeds back the value of the data in the curent node 
/// @return gives back the data found in the curnt node
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::SListIterator operator++ ()
/// @brief advances the iterator by one  
/// @post iterator will be advanced by one
/// @returns the this operator 
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::SListIterator operator++ (int)
/// @brief advances the iterator by one  
/// @post iterator will be advanced by one
/// @returns the this operator 
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::operator[] (unsigned int x)
/// @brief Gets the value at a specified posision in the SListIterator 
/// @pre the array must have values in it
/// @post will read the value at the specified posititon and throw a OUT_OF_BOUNDS
/// error if a position is called that dose not exist
/// @param x holds the position the user wants to read
/// @return returns the value at the specified postion in the SListIterator  
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn SListIterator <generic>::operator[] (unsigned int x) const
/// @brief Gets the constant value at a specified posision in the SListIterator 
/// @pre the SListIterator  must have values in it
/// @post will read the value at the specified posititon and throw a OUT_OF_BOUNDS
/// error if a position is called that dose not exist
/// @param x holds the position the user wants to read
/// @return returns the value at the specified postion in the SListIterator  
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn Array<generic>::size () const
/// @brief Gets the constant value of the curent size of the SListIterator  
/// @post will read the curent size
/// @return returns the size of the SListIterator 
////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////
/// @fn Array<generic>::max_size () const
/// @brief Gets the constant value of the max size of the SListIterator  
/// @post will read the curent max size
/// @return returns the max size of the SListIterator  
////////////////////////////////////////////////////////////////////// 

#include "snode.h"

template <class generic>
class SListIterator
{
  public:
    SListIterator ();
    SListIterator (SNode<generic> *);
    generic operator* () const;
    SListIterator operator++ ();
    SListIterator operator++ (int);
    bool operator== (const SListIterator &) const;
    bool operator!= (const SListIterator &) const;

  private:
    SNode<generic> * m_current;
};

#include "slistiterator.hpp"
#endif
